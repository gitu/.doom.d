#+TITLE: Captures

* Captures
#+BEGIN_SRC emacs-lisp
(after! org (setq org-capture-templates
                  '(("n" "Note")
                    ("t" "Tasks")
                    ("b" "Buffer Find")
                    ("f" "File Find")
                    ("fn" "Notes")
                    ("ft" "Tasks")
                    ("c" "Captures"))))
#+END_SRC
** Notes
*** New Note
#+BEGIN_SRC emacs-lisp
(setq my/org-note-categories '(("Topic: ") ("Account: ") ("Symptom: ")))
(defun my/generate-org-note-categories ()
  "Select a category for Notes"
  (interactive (list (completing-read "Select a category: " my/org-note-categories))))
(defun my/generate-org-note-name ()
;  (setq my-org-note--category (read-string "Category: "))
  (setq my-org-note--name (read-string "Name: "))
  (expand-file-name (format "%s.org" my-org-note--name) "~/org/notes/"))

(after! org (add-to-list 'org-capture-templates
                         '("nn" "New Note" plain (file my/generate-org-note-name)
                           "%(format \"#+TITLE: %s\n\" my-org-note--name)
%?")))
#+END_SRC
*** Exiting Headline
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("nc" "Child Headline" entry (file+function org-capture-file-selector org-capture-headline-finder)
"* %u %^{note}%? :%^G")))
#+END_SRC
*** New Headline
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
                         '("np" "Parent Headline" entry (file org-capture-file-selector)
                           "* %?")))
#+END_SRC
*** Itemized List
#+BEGIN_SRC emacs-lisp
(defun org-capture-file-selector ()
  "test file selector"
  (interactive)
  (setq org-notes-directory "~/org/notes/")
  (concat (read-file-name "Select file: " org-notes-directory)))
(after! org (add-to-list 'org-capture-templates
                         '("ni" "Itemized Notes" plain (file+function org-capture-file-selector org-capture-headline-finder)
                           "- %t %?")))
#+END_SRC
** Tasks
*** New Task
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("tt" "New Task" entry (file "~/org/workload/inbox.org")
               "* TODO %^{taskname} %^G
:PROPERTIES:
:CREATED: %U
:WHO:      %^{who}
:END:

\** TODO %^{childtask}
%(format \"%s\" (org-capture-template-selector))%?")))
#+END_SRC
*** New Itemized Note
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("ti" "+Task Item" plain (file+function "~/org/workload/tasks.org" org-capture-headline-finder)
"- %u %?")))
#+END_SRC
*** Child Task
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("tc" "Child Task" entry (file+function buffer-name org-capture-headline-finder)
"* TODO %u %^{task} %^G
%?")))
#+END_SRC
** Capture
*** Reference
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("cr" "Reference" entry (file "~/org/workload/references.org")
"* TODO %^{reference}
%(format \"%s\" (org-capture-template-selector))%?")))
#+END_SRC
*** Diary Entry
#+BEGIN_SRC emacs-lisp
(defun my/generate-org-diary-name ()
  (setq my-org-note--name (read-string "Name: "))
  (setq my-org-note--time (format-time-string "%Y-%m-%d"))
  (expand-file-name (format "%s %s.org" my-org-note--time my-org-note--name) "~/org/diary/"))

(after! org (add-to-list 'org-capture-templates
                  '("cd" "Diary" entry (file+datetree "~/org/workload/diary.org")
                    "* %\\1
:PROPERTIES:
:TAG:      %^{TAG}
:END:
+ %t %?")))
#+END_SRC
*** Time Tracking
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("cx" "Time Tracker" entry (file+olp+datetree "~/org/workload/timetracking.org")
               "* [%\\1] %\\7 for %\\5
:PROPERTIES:
:CASENUMBER: %^{Case or SVCTAG}
:ACCOUNT:  %^{account}
:AUDIENCE: %^{audience}
:SOURCE:   %^{source|Phone|Email|IM|Computer|Onsite|OOO|Meeting}
:PERSON:   %^{Whose asking for help?}
:TASK:     %^{task}
:DESCRIPTION: %^{description}
:CREATED:  %u
:END:
:LOGBOOK:
:END:
%?" :tree-type week :clock-in t :clock-resume t)))
#+END_SRC
** Headline
*** Append current heading
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("hh" "Append Headline" entry (file+function buffer-name org-back-to-heading-or-point-min)
"* %u %^{name}
%?" :empty-lines 1)))
#+END_SRC
*** Add Notes
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
                         '("hn" "Add Note" plain (file+function buffer-name org-end-of-subtree)
                         "+ %u %?")))
#+END_SRC
** File
** Buffer Find
*** Child Headline
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("bh" "Child Headline" entry (file+function buffer-name org-capture-headline-finder)
"* %u %^{note}
%?")))
#+END_SRC
*** Headline Item
#+BEGIN_SRC emacs-lisp
(defun org-task-item-option ()
  "Simple function to select if you want a item or checklist inserted"
  (interactive)
  (let (choices ("Item" "Checklist")))
  (if (equal (choices "Item"))
      (concat "+ %u %?")
    (concat "+ [ ] %u %?")))
(after! org (add-to-list 'org-capture-templates
                         '("bi" "Headline Item" plain (file+function buffer-name org-capture-headline-finder)
                         "+ %u %?")))
#+END_SRC
